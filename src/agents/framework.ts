import { agentRegistry } from './registry';
import { GlobalReviewState } from './state';
import {
  AgentType,
  ComprehensiveReviewResult,
  FileAnalysisData,
  PRContext,
} from './types';
import { ErrorHandler } from './errorHandler';
import { LanguageDetector } from '../utils/languageDetector';

export class AgentFramework {
  private languageDetector: LanguageDetector;

  constructor() {
    this.languageDetector = new LanguageDetector();
  }

  public async executeReview(
    prContext: PRContext,
    // Allow passing mock file data for PoC/testing purposes
    mockFiles?: { filePath: string; rawContent: string }[],
  ): Promise<ComprehensiveReviewResult> {
    // 1. Initialize state
    const state = new GlobalReviewState(prContext);

    // For PoC/testing, populate fileAnalysis from mock data
    if (mockFiles) {
      for (const mockFile of mockFiles) {
        const languageResult = this.languageDetector.detectLanguage(
          mockFile.filePath,
        );
        state.fileAnalysis[mockFile.filePath] = {
          filePath: mockFile.filePath,
          rawContent: mockFile.rawContent,
          diffContent: '', // Not used in PoC
          fileType: languageResult.language, // Or a more specific file type if needed
          language: languageResult.language,
        };
      }
    }
    // In a real application, you would fetch file contents from a service here.

    try {
      // 2. Run Global Context Analysis
      const contextAnalyzer = agentRegistry.get(
        AgentType.GLOBAL_CONTEXT_ANALYZER,
      );
      if (!contextAnalyzer) {
        throw new Error('GlobalContextAnalyzerAgent not found in registry');
      }
      await contextAnalyzer.process(state, state); // Pass state as input

      // 3. Get Orchestrator
      const orchestratorAgent = agentRegistry.get(AgentType.ORCHESTRATOR);
      if (!orchestratorAgent) {
        throw new Error('OrchestratorAgent not found in registry');
      }

      // 4. Execute orchestration
      await orchestratorAgent.process(state, state); // Pass state as input

      // 5. Get Synthesis Agent
      const synthesisAgent = agentRegistry.get(AgentType.REFINEMENT_SYNTHESIS);
      if (!synthesisAgent) {
        throw new Error('RefinementSynthesisAgent not found in registry');
      }

      // 6. Execute synthesis
      const synthesisResult = await synthesisAgent.process(state, state);

      // 7. Get Final Report Generator
      const reportGenerator = agentRegistry.get(AgentType.FINAL_REPORT_GENERATOR);
      if (!reportGenerator) {
        throw new Error('FinalReportGeneratorAgent not found in registry');
      }

      // 8. Execute report generation
      const finalReportResult = await reportGenerator.process(synthesisResult.output, state);
      state.finalResult = finalReportResult.output;

      // 9. Return final result
      if (!state.finalResult) {
        throw new Error(
          'Final result was not generated by the report generator agent.',
        );
      }

      return state.finalResult;
    } catch (error) {
      // If any critical error bubbles up, handle it and return a failure report
      return ErrorHandler.handleFrameworkError(error as Error, state);
    }
  }
}
